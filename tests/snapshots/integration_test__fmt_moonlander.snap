---
source: tests/integration_test.rs
info:
  program: qmkfmt
  args: []
  stdin: "#include QMK_KEYBOARD_H\n#include \"version.h\"\n#define MOON_LED_LEVEL LED_LEVEL\n#define ML_SAFE_RANGE SAFE_RANGE\n\n#define LYR_BSE 0\n#define LYR_GAM 1\n#define LYR_SYM 2\n#define LYR_NAV 3\n#define LYR_NUM 4\n#define LYR_FUN 5\n\nenum custom_keycodes {\n  RGB_SLD = ML_SAFE_RANGE,\n};\n\nconst uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {\n  [LYR_BSE] = LAYOUT_moonlander(\n    TG(LYR_GAM),          KC_1,           KC_2,           KC_3,           KC_4,           KC_5,           RGB_TOG,                                        TOGGLE_LAYER_COLOR,KC_6,           KC_7,           KC_8,           KC_9,           KC_0,           TG(5),          \n    _______, KC_Q,           KC_W,           KC_E,           KC_R,           KC_T,           KC_PAGE_UP,                                     LSFT(KC_INSERT),KC_Y,           KC_U,           KC_I,           KC_O,           KC_P,           KC_PIPE,        \n    KC_ESCAPE,      LALT_T(KC_A),LGUI_T(KC_S),LCTL_T(KC_D),LSFT_T(KC_F),KC_G,           KC_PGDN,                                                                        KC_DELETE,      KC_H,           RSFT_T(KC_J),RCTL_T(KC_K),RGUI_T(KC_L),RALT_T(KC_SCLN),KC_QUOTE,       \n    KC_LEFT_SHIFT,  KC_Z,           KC_X,           KC_C,           KC_V,           KC_B,                                           KC_N,           KC_M,           KC_COMMA,       KC_DOT,         KC_SLASH,       KC_RIGHT_SHIFT, \n    _______, _______, _______, LT(3,KC_LEFT),  LT(4,KC_RIGHT), KC_LEFT_GUI,                                                                                                    RGUI_T(KC_TAB),KC_UP,          KC_DOWN,        _______, _______, _______, \n    KC_SPACE,       LCTL_T(KC_TAB),MO(5),                          KC_TAB,         KC_BSPC,        LT(2,KC_ENTER)\n  ),\n  [LYR_GAM] = LAYOUT_moonlander(\n    _______, _______, _______, _______, _______, _______, QK_BOOT,                                 _______, _______, _______, _______, _______, _______, _______, \n    KC_TAB,         _______, KC_W,           _______, _______, _______, _______,                                 _______, _______, _______, _______, _______, _______, _______, \n    KC_ESCAPE,      KC_A,           KC_S,           KC_D,           KC_F,           _______, _______,                                                                 _______, _______, _______, _______, _______, _______, _______, \n    KC_LEFT_SHIFT,  _______, _______, _______, _______, _______,                                 _______, _______, _______, _______, _______, _______, \n    KC_LEFT_ALT,    _______, _______, _______, _______, _______,                                                                                                 _______, _______, _______, _______, _______, _______, \n    KC_SPACE,       KC_LEFT_CTRL,   MO(LYR_FUN),                          _______, _______, _______\n  ),\n  [LYR_SYM] = LAYOUT_moonlander(\n    _______, _______, _______, _______, _______, _______, _______,                                 _______, _______, _______, _______, _______, _______, _______, \n    _______, KC_1,           KC_2,           KC_3,           KC_4,           KC_5,           _______,                                 _______, KC_6,           KC_7,           KC_8,           KC_9,           KC_0,           _______, \n    _______, KC_HASH,        KC_DLR,         KC_LPRN,        KC_RPRN,        KC_EQUAL,       _______,                                                                 _______, KC_TILD,        KC_UNDS,        KC_MINUS,       KC_ASTR,        KC_AMPR,        KC_GRAVE,       \n    KC_LCBR,        KC_PERC,        KC_CIRC,        KC_LBRC,        KC_RBRC,        KC_PLUS,                                        KC_AT,          KC_EXLM,        _______, _______, KC_BSLS,        KC_RCBR,        \n    _______, _______, _______, KC_AUDIO_VOL_DOWN,KC_AUDIO_VOL_UP,_______,                                                                                                 _______, KC_BRIGHTNESS_UP,KC_BRIGHTNESS_DOWN,_______, _______, _______, \n    _______, CW_TOGG,        _______,                 _______, _______, _______\n  ),\n  [LYR_NAV] = LAYOUT_moonlander(\n    _______, _______, _______, _______, _______, _______, _______,                                 _______, _______, _______, _______, _______, _______, QK_BOOT,        \n    _______, KC_MS_WH_DOWN,  KC_MS_UP,       KC_MS_WH_UP,    _______, _______, _______,                                 _______, _______, _______, _______, _______, _______, _______, \n    _______, KC_MS_LEFT,     KC_MS_DOWN,     KC_MS_RIGHT,    _______, _______, _______,                                                                 _______, _______, KC_MS_BTN1,     KC_MS_BTN2,     _______, _______, _______, \n    _______, _______, _______, _______, _______, _______,                                 _______, _______, KC_MEDIA_PREV_TRACK,KC_MEDIA_NEXT_TRACK,_______, _______, \n    _______, _______, _______, _______, _______, _______,                                                                                                 _______, _______, KC_AUDIO_VOL_DOWN,KC_AUDIO_MUTE,  _______, _______, \n    KC_MS_BTN1,     KC_MS_BTN2,     KC_MS_BTN3,                     KC_MS_BTN3,     KC_MS_BTN2,     KC_MS_BTN1\n  ),\n  [LYR_NUM] = LAYOUT_moonlander(\n    _______, _______, _______, _______, _______, _______, _______,                                 _______, _______, KC_SLASH,       KC_ASTR,        KC_MINUS,       _______, _______, \n    _______, KC_KP_7,        KC_KP_8,        KC_KP_9,        _______, _______, _______,                                 _______, _______, KC_7,           KC_8,           KC_9,           _______, _______, \n    KC_KP_0,        KC_KP_4,        KC_KP_5,        KC_KP_6,        _______, _______, _______,                                                                 _______, KC_0,           KC_4,           KC_5,           KC_6,           KC_PLUS,        _______, \n    KC_KP_DOT,      KC_KP_1,        KC_KP_2,        KC_KP_3,        _______, _______,                                 _______, KC_1,           KC_2,           KC_3,           KC_ENTER,       _______, \n    _______, _______, _______, _______, _______, _______,                                                                                                 _______, _______, _______, KC_DOT,         _______, _______, \n    _______, _______, _______,                 _______, _______, _______\n  ),\n  [LYR_FUN] = LAYOUT_moonlander(\n    _______, _______, _______, _______, _______, _______, _______,                                 _______, _______, _______, _______, _______, _______, _______, \n    _______, KC_F1,          KC_F2,          KC_F3,          KC_F4,          KC_F5,          _______,                                 _______, _______, _______, _______, _______, _______, _______, \n    _______, KC_F6,          KC_F7,          KC_F8,          KC_F9,          KC_F10,         _______,                                                                 _______, _______, _______, _______, _______, _______, _______, \n    _______, KC_F11,         KC_F12,         _______, _______, _______,                                 _______, _______, _______, _______, _______, _______, \n    _______, _______, _______, _______, _______, _______,                                                                                                 _______, _______, _______, _______, _______, _______, \n    _______, _______, _______,                 _______, _______, _______\n  ),\n};\n\nvoid housekeeping_task_user(void) {\n    if (is_transport_connected()) {\n        layer_off(LYR_GAM);\n    } else {\n        layer_on(LYR_GAM);\n    }\n}\n\nextern rgb_config_t rgb_matrix_config;\n\nvoid keyboard_post_init_user(void) {\n  rgb_matrix_enable();\n}\n\n\nconst uint8_t PROGMEM ledmap[][RGB_MATRIX_LED_COUNT][3] = {\n    [0] = { {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {146,224,255}, {146,224,255}, {146,224,255}, {0,0,0}, {0,0,0}, {146,224,255}, {146,224,255}, {146,224,255}, {0,0,0}, {0,0,0}, {146,224,255}, {146,224,255}, {146,224,255}, {32,255,234}, {0,0,0}, {146,224,255}, {146,224,255}, {146,224,255}, {31,255,255}, {0,0,0}, {146,224,255}, {146,224,255}, {146,224,255}, {0,0,0}, {12,225,241}, {12,225,241}, {146,224,255}, {146,224,255}, {12,225,241}, {0,204,255}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {146,224,255}, {146,224,255}, {146,224,255}, {0,0,0}, {0,0,0}, {146,224,255}, {146,224,255}, {146,224,255}, {0,0,0}, {0,0,0}, {146,224,255}, {146,224,255}, {146,224,255}, {0,0,0}, {0,0,0}, {146,224,255}, {146,224,255}, {146,224,255}, {0,0,0}, {0,0,0}, {146,224,255}, {146,224,255}, {146,224,255}, {0,0,0}, {12,225,241}, {12,225,241}, {146,224,255}, {146,224,255}, {12,225,241}, {0,204,255} },\n\n    [1] = { {0,0,0}, {0,0,0}, {15,166,195}, {0,0,0}, {0,0,0}, {0,0,0}, {169,120,255}, {169,120,255}, {169,120,255}, {0,0,0}, {0,0,0}, {169,120,255}, {169,120,255}, {169,120,255}, {0,0,0}, {0,0,0}, {169,120,255}, {169,120,255}, {169,120,255}, {12,225,241}, {0,0,0}, {169,120,255}, {169,120,255}, {169,120,255}, {12,225,241}, {0,0,0}, {169,120,255}, {169,120,255}, {169,120,255}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {169,120,255}, {169,120,255}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {169,120,255}, {169,120,255}, {0,0,0}, {0,0,0}, {169,120,255}, {169,120,255}, {169,120,255}, {0,0,0}, {0,0,0}, {169,120,255}, {169,120,255}, {0,0,0}, {31,255,255}, {0,0,0}, {169,120,255}, {169,120,255}, {169,120,255}, {31,255,255}, {0,0,0}, {169,120,255}, {169,120,255}, {169,120,255}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0} },\n\n    [2] = { {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {12,225,241}, {32,255,234}, {0,0,0}, {0,0,0}, {0,0,0}, {32,255,234}, {32,255,234}, {0,0,0}, {0,0,0}, {0,0,0}, {12,225,241}, {32,255,234}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {169,120,255}, {169,120,255}, {169,120,255}, {0,0,0}, {12,225,241}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {169,120,255}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {169,120,255}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {169,120,255}, {169,120,255}, {169,120,255}, {0,0,0} },\n\n    [3] = { {0,0,0}, {0,0,0}, {32,255,234}, {12,225,241}, {0,0,0}, {0,0,0}, {32,255,234}, {32,255,234}, {32,255,234}, {0,0,0}, {0,0,0}, {32,255,234}, {32,255,234}, {32,255,234}, {0,0,0}, {0,0,0}, {32,255,234}, {32,255,234}, {32,255,234}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {12,225,241}, {12,225,241}, {0,0,0}, {12,225,241}, {32,255,234}, {32,255,234}, {32,255,234}, {0,0,0}, {12,225,241}, {32,255,234}, {32,255,234}, {32,255,234}, {0,0,0}, {12,225,241}, {32,255,234}, {32,255,234}, {32,255,234}, {0,0,0}, {0,0,0}, {0,0,0}, {32,255,234}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0} },\n\n    [4] = { {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {139,219,208}, {139,219,208}, {139,219,208}, {0,0,0}, {0,0,0}, {139,219,208}, {139,219,208}, {139,219,208}, {0,0,0}, {0,0,0}, {139,219,208}, {139,219,208}, {0,0,0}, {0,0,0}, {0,0,0}, {139,219,208}, {139,219,208}, {0,0,0}, {0,0,0}, {0,0,0}, {139,219,208}, {139,219,208}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0} },\n\n    [5] = { {0,0,0}, {113,186,145}, {113,186,145}, {113,186,145}, {0,0,0}, {0,0,0}, {113,186,145}, {113,186,145}, {113,186,145}, {0,0,0}, {0,0,0}, {113,186,145}, {113,186,145}, {113,186,145}, {0,0,0}, {0,0,0}, {113,186,145}, {113,186,145}, {113,186,145}, {0,0,0}, {0,0,0}, {113,186,145}, {113,186,145}, {113,186,145}, {0,0,0}, {0,0,0}, {113,186,145}, {113,186,145}, {113,186,145}, {0,0,0}, {0,0,0}, {0,0,0}, {113,186,145}, {113,186,145}, {113,186,145}, {113,186,145}, {25,218,204}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0} },\n\n};\n\nvoid set_layer_color(int layer) {\n  for (int i = 0; i < RGB_MATRIX_LED_COUNT; i++) {\n    HSV hsv = {\n      .h = pgm_read_byte(&ledmap[layer][i][0]),\n      .s = pgm_read_byte(&ledmap[layer][i][1]),\n      .v = pgm_read_byte(&ledmap[layer][i][2]),\n    };\n    if (!hsv.h && !hsv.s && !hsv.v) {\n        rgb_matrix_set_color( i, 0, 0, 0 );\n    } else {\n        RGB rgb = hsv_to_rgb( hsv );\n        float f = (float)rgb_matrix_config.hsv.v / UINT8_MAX;\n        rgb_matrix_set_color( i, f * rgb.r, f * rgb.g, f * rgb.b );   \n    }\n  }\n}\n\nbool rgb_matrix_indicators_user(void) {\n  if (keyboard_config.disable_layer_led) { return false; }\n  switch (biton32(layer_state)) {\n    case 0:\n      set_layer_color(0);\n      break;\n    case 1:\n      set_layer_color(1);\n      break;\n    case 2:\n      set_layer_color(2);\n      break;\n    case 3:\n      set_layer_color(3);\n      break;\n    case 4:\n      set_layer_color(4);\n      break;\n    case 5:\n      set_layer_color(5);\n      break;\n   default:\n    if (rgb_matrix_get_flags() == LED_FLAG_NONE)\n      rgb_matrix_set_color_all(0, 0, 0);\n    break;\n  }\n  return true;\n}\n\nbool process_record_user(uint16_t keycode, keyrecord_t *record) {\n  switch (keycode) {\n\n    case RGB_SLD:\n        if (record->event.pressed) {\n            rgblight_mode(1);\n        }\n        return false;\n  }\n  return true;\n}\n\n// Override caps word to not shift - to _\n// https://docs.qmk.fm/features/caps_word\nbool caps_word_press_user(uint16_t keycode) {\n    switch (keycode) {\n        // Keycodes that continue Caps Word, with shift applied.\n        case KC_A ... KC_Z:\n            add_weak_mods(MOD_BIT(KC_LSFT));  // Apply shift to next key.\n            return true;\n\n        // Keycodes that continue Caps Word, without shifting.\n        case KC_1 ... KC_0:\n        case KC_BSPC:\n        case KC_DEL:\n        case KC_UNDS:\n        case KC_MINS:\n            return true;\n\n        default:\n            return false;  // Deactivate Caps Word.\n    }\n}\n"
---
success: true
exit_code: 0
----- stdout -----
#include QMK_KEYBOARD_H
#include "version.h"
#define MOON_LED_LEVEL LED_LEVEL
#define ML_SAFE_RANGE SAFE_RANGE

#define LYR_BSE 0
#define LYR_GAM 1
#define LYR_SYM 2
#define LYR_NAV 3
#define LYR_NUM 4
#define LYR_FUN 5

enum custom_keycodes {
  RGB_SLD = ML_SAFE_RANGE,
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
  [LYR_BSE] = LAYOUT_moonlander(
     TG(LYR_GAM),  KC_1,           KC_2,          KC_3,          KC_4,           KC_5,            RGB_TOG,      TOGGLE_LAYER_COLOR,  KC_6,     KC_7,           KC_8,          KC_9,          KC_0,             TG(5),
     _______,      KC_Q,           KC_W,          KC_E,          KC_R,           KC_T,            KC_PAGE_UP,   LSFT(KC_INSERT),     KC_Y,     KC_U,           KC_I,          KC_O,          KC_P,             KC_PIPE,
     KC_ESCAPE,    LALT_T(KC_A),   LGUI_T(KC_S),  LCTL_T(KC_D),  LSFT_T(KC_F),   KC_G,            KC_PGDN,      KC_DELETE,           KC_H,     RSFT_T(KC_J),   RCTL_T(KC_K),  RGUI_T(KC_L),  RALT_T(KC_SCLN),  KC_QUOTE,
                   KC_LEFT_SHIFT,  KC_Z,          KC_X,          KC_C,           KC_V,            KC_B,         KC_N,                KC_M,     KC_COMMA,       KC_DOT,        KC_SLASH,      KC_RIGHT_SHIFT,
                   _______,        _______,       _______,       LT(3,KC_LEFT),  LT(4,KC_RIGHT),  KC_LEFT_GUI,  RGUI_T(KC_TAB),      KC_UP,    KC_DOWN,        _______,       _______,       _______,
                                                                 KC_SPACE,       LCTL_T(KC_TAB),  MO(5),        KC_TAB,              KC_BSPC,  LT(2,KC_ENTER)
  ),
  [LYR_GAM] = LAYOUT_moonlander(
     _______,    _______,        _______,  _______,  _______,   _______,       QK_BOOT,      _______,  _______,  _______,  _______,  _______,  _______,  _______,
     KC_TAB,     _______,        KC_W,     _______,  _______,   _______,       _______,      _______,  _______,  _______,  _______,  _______,  _______,  _______,
     KC_ESCAPE,  KC_A,           KC_S,     KC_D,     KC_F,      _______,       _______,      _______,  _______,  _______,  _______,  _______,  _______,  _______,
                 KC_LEFT_SHIFT,  _______,  _______,  _______,   _______,       _______,      _______,  _______,  _______,  _______,  _______,  _______,
                 KC_LEFT_ALT,    _______,  _______,  _______,   _______,       _______,      _______,  _______,  _______,  _______,  _______,  _______,
                                                     KC_SPACE,  KC_LEFT_CTRL,  MO(LYR_FUN),  _______,  _______,  _______
  ),
  [LYR_SYM] = LAYOUT_moonlander(
     _______,  _______,  _______,  _______,  _______,            _______,          _______,  _______,  _______,           _______,             _______,   _______,  _______,  _______,
     _______,  KC_1,     KC_2,     KC_3,     KC_4,               KC_5,             _______,  _______,  KC_6,              KC_7,                KC_8,      KC_9,     KC_0,     _______,
     _______,  KC_HASH,  KC_DLR,   KC_LPRN,  KC_RPRN,            KC_EQUAL,         _______,  _______,  KC_TILD,           KC_UNDS,             KC_MINUS,  KC_ASTR,  KC_AMPR,  KC_GRAVE,
               KC_LCBR,  KC_PERC,  KC_CIRC,  KC_LBRC,            KC_RBRC,          KC_PLUS,  KC_AT,    KC_EXLM,           _______,             _______,   KC_BSLS,  KC_RCBR,
               _______,  _______,  _______,  KC_AUDIO_VOL_DOWN,  KC_AUDIO_VOL_UP,  _______,  _______,  KC_BRIGHTNESS_UP,  KC_BRIGHTNESS_DOWN,  _______,   _______,  _______,
                                             _______,            CW_TOGG,          _______,  _______,  _______,           _______
  ),
  [LYR_NAV] = LAYOUT_moonlander(
     _______,  _______,        _______,     _______,      _______,     _______,     _______,     _______,     _______,     _______,              _______,              _______,  _______,  QK_BOOT,
     _______,  KC_MS_WH_DOWN,  KC_MS_UP,    KC_MS_WH_UP,  _______,     _______,     _______,     _______,     _______,     _______,              _______,              _______,  _______,  _______,
     _______,  KC_MS_LEFT,     KC_MS_DOWN,  KC_MS_RIGHT,  _______,     _______,     _______,     _______,     _______,     KC_MS_BTN1,           KC_MS_BTN2,           _______,  _______,  _______,
               _______,        _______,     _______,      _______,     _______,     _______,     _______,     _______,     KC_MEDIA_PREV_TRACK,  KC_MEDIA_NEXT_TRACK,  _______,  _______,
               _______,        _______,     _______,      _______,     _______,     _______,     _______,     _______,     KC_AUDIO_VOL_DOWN,    KC_AUDIO_MUTE,        _______,  _______,
                                                          KC_MS_BTN1,  KC_MS_BTN2,  KC_MS_BTN3,  KC_MS_BTN3,  KC_MS_BTN2,  KC_MS_BTN1
  ),
  [LYR_NUM] = LAYOUT_moonlander(
     _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  KC_SLASH,  KC_ASTR,  KC_MINUS,  _______,  _______,
     _______,  KC_KP_7,    KC_KP_8,  KC_KP_9,  _______,  _______,  _______,  _______,  _______,  KC_7,      KC_8,     KC_9,      _______,  _______,
     KC_KP_0,  KC_KP_4,    KC_KP_5,  KC_KP_6,  _______,  _______,  _______,  _______,  KC_0,     KC_4,      KC_5,     KC_6,      KC_PLUS,  _______,
               KC_KP_DOT,  KC_KP_1,  KC_KP_2,  KC_KP_3,  _______,  _______,  _______,  KC_1,     KC_2,      KC_3,     KC_ENTER,  _______,
               _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,   KC_DOT,   _______,   _______,
                                               _______,  _______,  _______,  _______,  _______,  _______
  ),
  [LYR_FUN] = LAYOUT_moonlander(
     _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
     _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
     _______,  KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
               _______,  KC_F11,   KC_F12,   _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
               _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
                                             _______,  _______,  _______,  _______,  _______,  _______
  ),
};

void housekeeping_task_user(void) {
    if (is_transport_connected()) {
        layer_off(LYR_GAM);
    } else {
        layer_on(LYR_GAM);
    }
}

extern rgb_config_t rgb_matrix_config;

void keyboard_post_init_user(void) {
  rgb_matrix_enable();
}


const uint8_t PROGMEM ledmap[][RGB_MATRIX_LED_COUNT][3] = {
    [0] = { {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {146,224,255}, {146,224,255}, {146,224,255}, {0,0,0}, {0,0,0}, {146,224,255}, {146,224,255}, {146,224,255}, {0,0,0}, {0,0,0}, {146,224,255}, {146,224,255}, {146,224,255}, {32,255,234}, {0,0,0}, {146,224,255}, {146,224,255}, {146,224,255}, {31,255,255}, {0,0,0}, {146,224,255}, {146,224,255}, {146,224,255}, {0,0,0}, {12,225,241}, {12,225,241}, {146,224,255}, {146,224,255}, {12,225,241}, {0,204,255}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {146,224,255}, {146,224,255}, {146,224,255}, {0,0,0}, {0,0,0}, {146,224,255}, {146,224,255}, {146,224,255}, {0,0,0}, {0,0,0}, {146,224,255}, {146,224,255}, {146,224,255}, {0,0,0}, {0,0,0}, {146,224,255}, {146,224,255}, {146,224,255}, {0,0,0}, {0,0,0}, {146,224,255}, {146,224,255}, {146,224,255}, {0,0,0}, {12,225,241}, {12,225,241}, {146,224,255}, {146,224,255}, {12,225,241}, {0,204,255} },

    [1] = { {0,0,0}, {0,0,0}, {15,166,195}, {0,0,0}, {0,0,0}, {0,0,0}, {169,120,255}, {169,120,255}, {169,120,255}, {0,0,0}, {0,0,0}, {169,120,255}, {169,120,255}, {169,120,255}, {0,0,0}, {0,0,0}, {169,120,255}, {169,120,255}, {169,120,255}, {12,225,241}, {0,0,0}, {169,120,255}, {169,120,255}, {169,120,255}, {12,225,241}, {0,0,0}, {169,120,255}, {169,120,255}, {169,120,255}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {169,120,255}, {169,120,255}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {169,120,255}, {169,120,255}, {0,0,0}, {0,0,0}, {169,120,255}, {169,120,255}, {169,120,255}, {0,0,0}, {0,0,0}, {169,120,255}, {169,120,255}, {0,0,0}, {31,255,255}, {0,0,0}, {169,120,255}, {169,120,255}, {169,120,255}, {31,255,255}, {0,0,0}, {169,120,255}, {169,120,255}, {169,120,255}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0} },

    [2] = { {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {12,225,241}, {32,255,234}, {0,0,0}, {0,0,0}, {0,0,0}, {32,255,234}, {32,255,234}, {0,0,0}, {0,0,0}, {0,0,0}, {12,225,241}, {32,255,234}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {169,120,255}, {169,120,255}, {169,120,255}, {0,0,0}, {12,225,241}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {169,120,255}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {169,120,255}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {169,120,255}, {169,120,255}, {169,120,255}, {0,0,0} },

    [3] = { {0,0,0}, {0,0,0}, {32,255,234}, {12,225,241}, {0,0,0}, {0,0,0}, {32,255,234}, {32,255,234}, {32,255,234}, {0,0,0}, {0,0,0}, {32,255,234}, {32,255,234}, {32,255,234}, {0,0,0}, {0,0,0}, {32,255,234}, {32,255,234}, {32,255,234}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {12,225,241}, {12,225,241}, {0,0,0}, {12,225,241}, {32,255,234}, {32,255,234}, {32,255,234}, {0,0,0}, {12,225,241}, {32,255,234}, {32,255,234}, {32,255,234}, {0,0,0}, {12,225,241}, {32,255,234}, {32,255,234}, {32,255,234}, {0,0,0}, {0,0,0}, {0,0,0}, {32,255,234}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0} },

    [4] = { {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {139,219,208}, {139,219,208}, {139,219,208}, {0,0,0}, {0,0,0}, {139,219,208}, {139,219,208}, {139,219,208}, {0,0,0}, {0,0,0}, {139,219,208}, {139,219,208}, {0,0,0}, {0,0,0}, {0,0,0}, {139,219,208}, {139,219,208}, {0,0,0}, {0,0,0}, {0,0,0}, {139,219,208}, {139,219,208}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0} },

    [5] = { {0,0,0}, {113,186,145}, {113,186,145}, {113,186,145}, {0,0,0}, {0,0,0}, {113,186,145}, {113,186,145}, {113,186,145}, {0,0,0}, {0,0,0}, {113,186,145}, {113,186,145}, {113,186,145}, {0,0,0}, {0,0,0}, {113,186,145}, {113,186,145}, {113,186,145}, {0,0,0}, {0,0,0}, {113,186,145}, {113,186,145}, {113,186,145}, {0,0,0}, {0,0,0}, {113,186,145}, {113,186,145}, {113,186,145}, {0,0,0}, {0,0,0}, {0,0,0}, {113,186,145}, {113,186,145}, {113,186,145}, {113,186,145}, {25,218,204}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0} },

};

void set_layer_color(int layer) {
  for (int i = 0; i < RGB_MATRIX_LED_COUNT; i++) {
    HSV hsv = {
      .h = pgm_read_byte(&ledmap[layer][i][0]),
      .s = pgm_read_byte(&ledmap[layer][i][1]),
      .v = pgm_read_byte(&ledmap[layer][i][2]),
    };
    if (!hsv.h && !hsv.s && !hsv.v) {
        rgb_matrix_set_color( i, 0, 0, 0 );
    } else {
        RGB rgb = hsv_to_rgb( hsv );
        float f = (float)rgb_matrix_config.hsv.v / UINT8_MAX;
        rgb_matrix_set_color( i, f * rgb.r, f * rgb.g, f * rgb.b );   
    }
  }
}

bool rgb_matrix_indicators_user(void) {
  if (keyboard_config.disable_layer_led) { return false; }
  switch (biton32(layer_state)) {
    case 0:
      set_layer_color(0);
      break;
    case 1:
      set_layer_color(1);
      break;
    case 2:
      set_layer_color(2);
      break;
    case 3:
      set_layer_color(3);
      break;
    case 4:
      set_layer_color(4);
      break;
    case 5:
      set_layer_color(5);
      break;
   default:
    if (rgb_matrix_get_flags() == LED_FLAG_NONE)
      rgb_matrix_set_color_all(0, 0, 0);
    break;
  }
  return true;
}

bool process_record_user(uint16_t keycode, keyrecord_t *record) {
  switch (keycode) {

    case RGB_SLD:
        if (record->event.pressed) {
            rgblight_mode(1);
        }
        return false;
  }
  return true;
}

// Override caps word to not shift - to _
// https://docs.qmk.fm/features/caps_word
bool caps_word_press_user(uint16_t keycode) {
    switch (keycode) {
        // Keycodes that continue Caps Word, with shift applied.
        case KC_A ... KC_Z:
            add_weak_mods(MOD_BIT(KC_LSFT));  // Apply shift to next key.
            return true;

        // Keycodes that continue Caps Word, without shifting.
        case KC_1 ... KC_0:
        case KC_BSPC:
        case KC_DEL:
        case KC_UNDS:
        case KC_MINS:
            return true;

        default:
            return false;  // Deactivate Caps Word.
    }
}

----- stderr -----
